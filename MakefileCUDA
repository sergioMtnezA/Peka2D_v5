# Set no debug  by default
# Specify in command line: make DEBUG=yes to set debug
DEBUG=no
DLEVEL=2
WARN=no
OMP=no

# La siguiente no es necesariamente requerida, se agrega para
# mostrar como funciona.

# Macros

# Define C compiler
#CC = gcc
CC = g++
NVCC = nvcc

# Define C flags
C_CUDA_FLAGS = -I/usr/local/cuda/include -L/usr/local/cuda/lib64 -lcuda -lcudart -lcublas -lrt -lm
C_REQ_FLAGS =
C_OPT_FLAGS = -O3 -w
C_DEBUG_FLAGS = -g

C_PROFILE_FLAGS = -pg
C_WARN_FLAGS = -Wall
C_OMP_FLAGS = -fopenmp

CULIB_REQ_FLAGS = --compiler-bindir=g++ -w -m64 -arch sm_86 -Xptxas -dlcm=ca --use_fast_math -lcuda -lcudart -lcublas -lrt -lm
CULIB_OPT_FLAGS = -O3 -w
CULIB_DEBUG_FLAGS = -O3 -G -g -Xcompiler -rdynamic
#additional flags for cuda-memcheck: (release version) -Xcompiler -rdynamic -lineinfo   (debug version) -G -g -Xcompiler -rdynamic


############################ DEBUG #########################
# cuda-memcheck --tool memcheck ./peka2d_gpu ../dambreak1D_gpu/ case1
# cuda-memcheck --tool initcheck ./peka2d_gpu ../dambreak1D_gpu/ case1
# compute-sanitizer --tool memcheck --leak-check full 
ifeq ($(DEBUG),no)
	CFLAGS = $(C_OPT_FLAGS) $(C_CUDA_FLAGS) $(C_REQ_FLAGS)
	CULIBFLAGS = $(CULIB_OPT_FLAGS) $(CULIB_REQ_FLAGS)
endif

ifeq ($(DEBUG),yes)
	CFLAGS = $(C_DEBUG_FLAGS) $(C_CUDA_FLAGS) $(C_REQ_FLAGS)
	CULIBFLAGS = $(CULIB_DEBUG_FLAGS) $(CULIB_REQ_FLAGS)
endif
###########################################################

ifeq ($(WARN),yes)
	CFLAGS=$(C_REQ_FLAGS) $(C_OPT_FLAGS) $(C_WARN_FLAGS)
endif

ifeq ($(PROFILE),yes)
	CFLAGS=$(C_REQ_FLAGS) $(C_PROFILE_FLAGS)
endif

ifeq ($(OMP),yes)
	CFLAGS=$(C_REQ_FLAGS) $(C_OPT_FLAGS) $(C_OMP_FLAGS)
endif


OBJ = src/cuTilities.o src/boundary.o src/water.o src/memoryManage.o src/calculate.o src/writeInOut.o src/initialize.o src/mesh.o src/loadData.o src/mainKernel.o gpeka2d.o
BIN = gpeka2d

## $@ Es el token de la izquierda de los :
## $< Es el token de la derecha de los :

$(BIN): $(OBJ)
	$(NVCC) $(CULIBFLAGS) -o $@  $(OBJ)

clean:
	$(RM) $(OBJ) $(BIN)


# ------------------------------------------------------
gpeka2d.o: peka2d.cpp
	$(CC) $(CFLAGS) $< -c -o $@

src/mainKernel.o: src/mainKernel.cpp
	$(CC) $(CFLAGS) $< -c -o $@

src/loadData.o: src/loadData.cpp
	$(CC) $(CFLAGS) $< -c -o $@

src/mesh.o: src/mesh.cpp
	$(CC) $(CFLAGS) $< -c -o $@

src/initialize.o: src/initialize.cpp
	$(CC) $(CFLAGS) $< -c -o $@		

# CUDA-KERNEL compilation -----------------------------
src/writeInOut.o: src/writeInOut.cu
	$(NVCC) $(CULIBFLAGS) $< -c -o $@

src/calculate.o: src/calculate.cu
	$(NVCC) $(CULIBFLAGS) $< -c -o $@

src/memoryManage.o: src/memoryManage.cu
	$(NVCC) $(CULIBFLAGS) $< -c -o $@

src/water.o: src/water.cu
	$(NVCC) $(CULIBFLAGS) $< -c -o $@

src/boundary.o: src/boundary.cu
	$(NVCC) $(CULIBFLAGS) $< -c -o $@		

src/cuTilities.o: src/cuTilities.cu
	$(NVCC) $(CULIBFLAGS) $< -c -o $@	

